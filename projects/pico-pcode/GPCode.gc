#define TRACE_OFF

#include "GPCode.h"

GPCode *GPCode_new(void)
{
    if (GPCode$.id == 0)
        _initClass();
    GPCode *this = NEW(GPCode);
    this->class = &GPCode$;
    _(this).init(GPCode_ID);
    return this;
}

static void init(int id)
{
    GPCode *this = _THIS_; // special case for init
    __(this).init(id);
}

static void delete()
{
    GPCode *this = THIS(GPCode, "GPCode.delete");
    __(this).delete();
}

static void debug(char *fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    GPCode *this = THIS(GPCode, "GPCode.debug");
    __(this).debug(fmt, args);
}

static void* get(int n) {
    GPCode* this = THIS(GPCode, "GPCode.toString");
    if (n < 0 || n >= this->size)
        return NULL;
    void* s = this->array[n];
    _(this);
    return s;
}

static void push(void* s) {
    GPCode* this = THIS(GPCode, "GPCode.push");
    if (this->size == this->extent) {
        int new_extent = this->extent * this->mult;
            this->extent = new_extent;
        this->array = REALLOC(this->array, this->extent);
    }
    this->array[this->size++] = s;
}

GPCodeClass GPCode$;
static void _initClass() {
    memcpy(&GPCode$, &GObj$, sizeof(GObj$));
    GPCode$.name = "GPCode";
    GPCode$.id = GPCode_ID;
    GPCode$.super = &GObj$;
    GPCode$.init = init;
    GPCode$.delete = delete;
    GPCode$.debug = debug;
    GPCode$.push = push;
    GPCode$.get = get;
}
