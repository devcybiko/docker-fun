#define TRACE_OFF

#include "Xyzzy.h"

Xyzzy *Xyzzy_new(void)
{
    if (Xyzzy$.id == 0)
        _initClass();
    Xyzzy *this = NEW(Xyzzy);
    this->class = &Xyzzy$;
    _(this).init(Xyzzy_ID);
    return this;
}

static void init(int id)
{
    Xyzzy *this = _THIS_; // special case for init
    __(this).init(id);
}

static void delete()
{
    Xyzzy *this = THIS(Xyzzy, "Xyzzy.delete");
    __(this).delete();
}

static void debug(char *fmt, ...)
{
    va_list args;
    va_start(args, fmt);
    Xyzzy *this = THIS(Xyzzy, "Xyzzy.debug");
    __(this).debug(fmt, args);
}

static void* get(int n) {
    Xyzzy* this = THIS(Xyzzy, "Xyzzy.toString");
    void *result = NULL;
    if (0 <= n && n < this->size) {
        result = this->array[n];
    }
    return result;
}

static void push(void* s) {
    Xyzzy* this = THIS(Xyzzy, "Xyzzy.push");
    if (this->size == this->extent) {
        int new_extent = this->extent * this->mult;
        this->extent = new_extent;
        this->array = REALLOC(this->array, this->extent);
    }
    this->array[this->size++] = s;
}

XyzzyClass Xyzzy$;
static void _initClass() {
    memcpy(&Xyzzy$, &GObj$, sizeof(GObj$));
    Xyzzy$.name = "Xyzzy";
    Xyzzy$.id = Xyzzy_ID;
    Xyzzy$.super = &GObj$;
    Xyzzy$.init = init;
    Xyzzy$.delete = delete;
    Xyzzy$.debug = debug;
    Xyzzy$.push = push;
    Xyzzy$.get = get;
}
